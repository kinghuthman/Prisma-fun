generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["connectOrCreate", "transactionApi"]
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model User {
  id        Int                @id @default(autoincrement())
  email     String             @unique
  updatedAt DateTime           @updatedAt
  createdAt DateTime           @default(now())
  firstName String
  lastName  String
  social    Json
  // explicit many to many, models just point to each other
  courses   CourseEnrollment[]

  // one to many
  testResults TestResult[] @relation(name: "results")
  testsGraded TestResult[] @relation(name: "graded")
}

// model Token {
// }

model Course {
  id            Int                @id @default(autoincrement())
  name          String
  courseDetails String
  // can have both student and teachers, explcit many to many
  members       CourseEnrollment[]
  tests         Test[]
}

model CourseEnrollment {
  createdAt DateTime @default(now())
  role      UserRole

  // explicit many to many
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  courseId Int
  course   Course @relation(fields: [courseId], references: [id])
  // allows to write primary keys, this pk allows for
  @@id([userId, courseId, role])
}

enum UserRole {
  STUDENT
  TEACHER
}

model Test {
  id          Int          @id @default(autoincrement())
  updatedAt   DateTime     @updatedAt
  name        String
  date        DateTime
  courseId    Int
  course      Course       @relation(fields: [courseId], references: [id])
  // one-to-many
  testResults TestResult[]
}

model TestResult {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  result    Int // percentage precise to one decimal point `result * 10^-1`

  // one-to-many
  testId Int
  test   Test @relation(fields: [testId], references: [id])

  studentId Int
  student   User @relation(name: "results", fields: [studentId], references: [id])
  graderId  Int
  gradedBy  User @relation(name: "graded", fields: [graderId], references: [id])
}
